
(defpoll time0 :interval "10s"  "date '+%H':%M")
(defpoll date :interval "10s"  "date '+%b %d'")
(defpoll net :interval "10s" "iwctl station wlan0 show | awk '/Connected network/ {print $3}' && iwctl station wlan0 get-networks | awk 'NR>1 && NF>0 {print $1, $4}' | awk -F '\n' '/^\s*[a-zA-Z0-9]/ { print $1 }'")
(defpoll currentNetwork :interval "1s" "iwctl station wlan0 show | awk '/Connected network/ {print $3}'")
(defpoll firstNetwork :interval "1s" "iwctl station wlan0 get-networks | awk 'NR>1 && NF>0 {print $1, $4}' | awk -F '\n' '/^\s*[a-zA-Z0-9]/ { print $1 }' | sed -n '1p'")
(defpoll secondNetwork :interval "1s" "iwctl station wlan0 get-networks | awk 'NR>1 && NF>0 {print $1, $4}' | awk -F '\n' '/^\s*[a-zA-Z0-9]/ { print $1 }' | sed -n '2p'")
(defpoll thirdNetwork :interval "1s" "iwctl station wlan0 get-networks | awk 'NR>1 && NF>0 {print $1, $4}' | awk -F '\n' '/^\s*[a-zA-Z0-9]/ { print $1 }' | sed -n '3p'")
(defpoll currentBluetooth :interval "1s" "bluetoothctl info | grep 'Name' | cut -d ' ' -f 2-")
(defpoll bluetoothFirstDevice :interval "1s" "bluetoothctl devices | awk '{print $3,$4,$5}'|sed -n '1p'")
(defpoll bluetoothSecondDevice :interval "1s" "bluetoothctl devices | awk '{print $3,$4,$5}'|sed -n '2p'")
;; Profile vars ;;
(defvar IMAGEP "../../../assets/bendy.png")

;; Music Variables ;;
(defpoll art		:interval "2s"  "MediaControl coverloc")
(defpoll title		:interval "2s"  "MediaControl title")
(defpoll artist		:interval "2s"  "MediaControl artist")
(defpoll playpause	:interval "2s"  "MediaControl statusicon")
(defpoll songtime 	:interval "1s"  "MediaControl percent")

;; Calendar Widgets ;;
(defwidget cal []
	(box :class "cal-box" 
		 :orientation "v"
	(box :class "cal-inner-box"
	(calendar :class "cal" 
			  :day calendar_day 
			  :month calendar_month 
			  :year calendar_year))))
(defpoll calendar_day :interval "20h"
    "date '+%d'")
(defpoll calendar_month :interval "20h"
    "date '+%m'")
(defpoll calendar_year :interval "20h"
    "date '+%Y'")

(defwidget powermenu []
     (box :class "powermenu"
          :orientation "v"
          (lock-power-restart)))


(defwidget lock-power-restart []
     (box :orientation "v"
          :halign "center"
          :valign "center"
          :space-evenly "false"
          :spacing 30
          (box :orientation "v"
               :halign "center"
               :valign "center"
               :space-evenly "false"
               (button :onclick "bspc quit"
                    :class "logout-btn"
                    :tooltip "Logout bspwm"
                    "󰍃"))
          (box :orientation "v"
               :halign "center"
               :valign "center"
               :space-evenly "false"
               (button :onclick "physlock -d"
                    :class "lock-btn"
                    :tooltip "lock"
                    ""))
          (box :orientation "v"
               :halign "center"
               :valign "center"
               :space-evenly "false"
               (button :onclick "systemctl reboot"
                    :class "restart-btn"
                    :tooltip "restart"
                    ""))
          (box :orientation "v"
               :halign "center"
               :valign "center"
               :space-evenly "false"
               (button :onclick "systemctl poweroff"
                       :class "power-btn"
                       :tooltip "power off"
                       ""))))
                       
                       
(defwidget launchermenu []
     (box :class "launchermenu"
          :orientation "v"
          (pfp)))

(defwidget pfp []
     (box :orientation "v"
          :space-evenly "false"
          :halign "center"
          :valign "start"
          (box :style "background-image: url('${IMAGEP}');" 
		  :class "face" 
		  :halign "center")
          (label :text "I use Arch BTW"
                 :class "launcher-pfp-label")
          (label :text "${time0} - ${date}"
                 :class "launcher-pfp-label2")
          (box :orientation "h"
               :space-evenly true
               (button :class "launcher-btn"
                       :onclick "OpenApps --browser"
                       :tooltip "Browser"
                       "󰇧")
               (button :class "launcher-btn"
                       :onclick "OpenApps --fetch"
                       :tooltip "System Fetch"
                       "󰚌")
               (button :class "launcher-btn"
                       :onclick "OpenApps --filemanager"
                       :tooltip "File Manager"
                       "󰝰")
               (button :class "launcher-btn"
                       :onclick "OpenApps --terminal"
                       :tooltip "Terminal"
                       "󰆍")
               (button :class "launcher-btn"
                       :onclick "OpenApps --sublimetext"
                       :tooltip "Editor"
                       "󰷈"))))

;; options Widgets ;; 
(defwidget bluetooth []
     (box :class "optionbox"
          :orientation "v"
          :space-evenly "false"
          :halign "center"
          :valign "center"
          (box :orientation "h"
               :halign "center"
               :valign "center"
               :space-evenly "true"
               :spacing 40
                 (button :class "bluetoothOption"
                    :onclick "OpenApps --bluetoothOn"
                    :tooltip "On"
                    "󰂯")
                 (button :class "bluetoothOption"
                    :onclick "OpenApps --bluetoothOff"
                    :tooltip "Off"
                    "󰂲"))
          (label :text currentBluetooth
                 :class "currentNetwork")
          (box :orientation "v"
               :halign "center"
               :valign "center"
               :space-evenly "true"
                (label :text "connect"
                       :class "launcher-pfp-label")
                (button :class "bluetoothDevice"
                        :onclick "OpenApps --bluetoothFirstDevice"
                        :tooltip bluetoothFirstDevice
                        bluetoothFirstDevice)
                (button :class "bluetoothDevice"
                        :onclick "OpenApps --bluetoothSecondDevice"
                        :tooltip bluetoothSecondDevice
                        bluetoothSecondDevice)
                (label :text "scan"
                       :class "launcher-pfp-label")  
                (button :class "bluetoothOption"
                        :onclick "OpenApps --bluetooth"
                        :tooltip "scan"
                        "󱓇"))))


;; wifiWidget ;;
(defwidget wifiWidget []
    (box :class "optionbox netbox"
         :orientation "v"
         :space-evenly "false"
         :halign "center"
         :valign "start"
         (box :orientation "v"
                :halign "center"
                :valign "center"
                :space-evenly "false"
                :hexpand "true"
                :spacing 0
                (label :text "Network"
                        :class "launcher-pfp-label")
                (label :text currentNetwork
                        :class "currentNetwork"))
        (box :orientation "v"
                :space-evenly "false"
            (button :class "firstNetwork"
                        :onclick "OpenApps --firstNetwork"
                        :tooltip firstNetwork
                        :visible {firstNetwork != ""}
                        firstNetwork)
            (button :class "firstNetwork"
                        :onclick "OpenApps --secondNetwork"
                        :tooltip secondNetwork
                        :visible {secondNetwork != ""}
                        secondNetwork)
            (button :class "firstNetwork"
                        :onclick "OpenApps --thirdNetwork"
                        :tooltip thirdNetwork
                        :visible {thirdNetwork != ""}
                        thirdNetwork))))
      


;;  Music Widgets ;;
(defwidget music [] 
	(box 	:class "music-player"
			:orientation "v" 
		 	:space-evenly "false"  
		 	:halign "center"
	(box 	:class "album_art" 
		 	:style "background-image: url('${art}');")
	(box 	:orientation "v" 
		 	:space-evenly "false"
		 	:halign "center"
		 	:spacing 10 
	(label  :class "artist"
		 	:limit-width 15
		 	:text artist)
 	(label  :class "song"
		 	:limit-width 20
		 	:text title) 
	(box 	:orientation "h"  
		 	:space-evenly "false"
			:halign "center"
			:spacing 30
			(button :class "btn_prev" :onclick "MediaControl --previous" "󰒮")
			(button :class "btn_play" :onclick "MediaControl --toggle" playpause)
			(button :class "btn_next" :onclick "MediaControl --next" "󰒭"))
	(box    :orientation "h"
			:class "metric-player"
			:space-evenly "false"
			(scale  :min 0
					:max 101
					:active "false"
					:value {songtime != "" ? "${songtime}" : "0"}
				)       
			)	
		)
	)
)

;; options prueba ;;
(defwindow wifiMenu
    :geometry (geometry :x "70%"
                        :y "7%"
                        :width "10%"
                        :height "10%")
    (wifiWidget))

;; Options Menu ;;
(defwindow bluetoothMenu
    :geometry (geometry :x "26%"
                        :y "7%"
                        :width "10%"
                        :height "10%")
    (bluetooth))

;; Power Menu ;;
(defwindow powermenu
    :geometry (geometry :x "0%"
                        :y "0%"
                        :width "4%"
                        :height "28%"
                        :anchor "center right")
    (powermenu))
    
    
;; Calendar Windows ;;
(defwindow calendar
	:geometry (geometry :x "78%" 
						:y "7%" 
						:width "19%" 
						:height "25%")
(cal))


;; Profile Card Menu ;;
(defwindow launchermenu
    :geometry (geometry :x "26%"
                        :y "7%"
                        :width "13%"
                        :height "31%")
    (launchermenu))


;; Music Player ;;
(defwindow music
    :geometry (geometry :x "43%"
                        :y "7%"
                        :width "18%"
                        :height "47%")
    (music))
